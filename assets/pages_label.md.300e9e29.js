import{L as n}from"./chunks/label.fc29198a.js";import{r as o,o as t,c as p,a as s,b as e,w as c,d as a}from"./app.9a7eaa27.js";import"./chunks/Utilities.fd907a34.js";import"./chunks/optional.e08affb6.js";const i=a('<h1 id="label" tabindex="-1">Label <a class="header-anchor" href="#label" aria-hidden="true">#</a></h1><p>A label component, used to advise the user of the appropriate content to input.</p><blockquote><p>This is a sub-component and is not really intended for direct use as-is. If you&#39;re only intending to use Varnish&#39;s &#39;full&#39; components e.g. a TextBox or DropDown, then you can skip this section. However, if you want to augment Varnish with your own components, then you can make use of it if you wish.</p></blockquote><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-hidden="true">#</a></h2><ul><li>Can be set to optional</li><li>Supports the use of icons</li><li>Handles filled and focused states</li></ul><h2 id="demo" tabindex="-1">Demo <a class="header-anchor" href="#demo" aria-hidden="true">#</a></h2><p>You can use the toggle at the top right of the page to switch between light and dark-modes. For a more extensive demo, <a href="/playgrounds/label/index.html">check out the playground</a>.</p>',7),r={class:"border border-dashed border-gray-300 dark:border-gray-600 flex justify-center rounded-md p-3 mt-8"},d={class:"relative min-h-[50px] min-w-[210px]"},h=a(`<h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h2><p>Begin by importing the component and registering it like so:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">v-label</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">v-label</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> LabelComponent </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@caneara/varnish/src/components/label.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">components</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">v-label</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> : </span><span style="color:#A6ACCD;">LabelComponent</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h2><p>The following <code>props</code> are exposed by the component.</p><h3 id="filled" tabindex="-1">filled <a class="header-anchor" href="#filled" aria-hidden="true">#</a></h3><ul><li>Type: <code>Boolean</code></li><li>Default: <code>false</code></li></ul><p>Specify whether the component&#39;s parent has a value or not.</p><p>When set to <code>true</code>, the label will shrink in size and move up / out of the way so that the value of the parent component can be shown.</p><p>In most cases, the parent component should use the <code>Foundation</code> mixin and bind <code>filled</code> to the <code>modelValue</code> state e.g. <code>:filled=&quot;modelValue !== &#39;&#39;&quot;</code></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">v-label</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:filled</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">v-label</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="focus" tabindex="-1">focus <a class="header-anchor" href="#focus" aria-hidden="true">#</a></h3><ul><li>Type: <code>Boolean</code></li><li>Default: <code>false</code></li></ul><p>Specify whether the component&#39;s parent has been focused on by the user.</p><p>When set to <code>true</code>, the label will shrink in size and move up / out of the way so that the user can type, click or select a value.</p><p>In most cases, the parent component should use the <code>Foundation</code> mixin and simply pass the corresponding data attribute down.</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">v-label</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:focus</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">v-label</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="icon" tabindex="-1">icon <a class="header-anchor" href="#icon" aria-hidden="true">#</a></h3><ul><li>Type: <code>String</code></li><li>Default: <code>&#39;fas fa-terminal&#39;</code></li></ul><p>Specify the FontAwesome icon to display alongside the component&#39;s text.</p><p>When set to <code>&#39;&#39;</code>, the icon will be hidden.</p><p>The icon is hidden when either <code>filled</code> or <code>focus</code> are set to <code>true</code>.</p><p>In most cases, the parent component should use the <code>Foundation</code> mixin and simply pass the corresponding data attribute down.</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">v-label</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">icon</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fas fa-home</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">v-label</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="optional" tabindex="-1">optional <a class="header-anchor" href="#optional" aria-hidden="true">#</a></h3><ul><li>Type: <code>Boolean</code></li><li>Default: <code>false</code></li></ul><p>Specify whether the component&#39;s parent is optional or not.</p><p>When set to <code>true</code>, an <a href="/pages/optional.html">optional</a> component will be shown next to the <a href="#text">text</a>.</p><p>The optional component is hidden when either <code>filled</code> or <code>focus</code> are set to <code>true</code>, regardless of whether it is enabled or not.</p><p>In most cases, the parent component should use the <code>Foundation</code> mixin and simply pass the corresponding data attribute down.</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">v-label</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:optional</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">v-label</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="optionaltext" tabindex="-1">optionalText <a class="header-anchor" href="#optionaltext" aria-hidden="true">#</a></h3><ul><li>Type: <code>String</code></li><li>Default: <code>&#39;Optional&#39;</code></li></ul><p>Specify the text that the optional component should display.</p><p>This property is only relevant when <code>optional</code> is set to <code>true</code>.</p><p>In most cases, the parent component should use the <code>Foundation</code> mixin and simply pass the corresponding data attribute down.</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">v-label</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">optionalText</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Not Required</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">v-label</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="value" tabindex="-1">value <a class="header-anchor" href="#value" aria-hidden="true">#</a></h3><ul><li>Type: <code>String</code></li><li>Default: <code>&#39;Label&#39;</code></li></ul><p>Specify the text to display within the component.</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">v-label</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">First name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">v-label</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="custom-styling" tabindex="-1">Custom styling <a class="header-anchor" href="#custom-styling" aria-hidden="true">#</a></h2><p>If you want to override any of the component&#39;s default styling, then you can do so by using the following CSS selectors:</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">varnish-label</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">varnish-label</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">varnish-icon</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">varnish-label</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">varnish-value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Here&#39;s an example that changes the icon size to 30px:</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">varnish-label</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">varnish-icon</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> @apply text-[30px] </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>Be sure to use the full selector path when overriding any styles. That way, any changes will be scoped to the component in question.</p></blockquote>`,47),C=JSON.parse('{"title":"Label","description":"","frontmatter":{},"headers":[{"level":2,"title":"Features","slug":"features","link":"#features","children":[]},{"level":2,"title":"Demo","slug":"demo","link":"#demo","children":[]},{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":2,"title":"Properties","slug":"properties","link":"#properties","children":[{"level":3,"title":"filled","slug":"filled","link":"#filled","children":[]},{"level":3,"title":"focus","slug":"focus","link":"#focus","children":[]},{"level":3,"title":"icon","slug":"icon","link":"#icon","children":[]},{"level":3,"title":"optional","slug":"optional","link":"#optional","children":[]},{"level":3,"title":"optionalText","slug":"optionaltext","link":"#optionaltext","children":[]},{"level":3,"title":"value","slug":"value","link":"#value","children":[]}]},{"level":2,"title":"Custom styling","slug":"custom-styling","link":"#custom-styling","children":[]}],"relativePath":"pages/label.md"}'),y={name:"pages/label.md"},v=Object.assign(y,{setup(F){return(u,D)=>{const l=o("ClientOnly");return t(),p("div",null,[i,s("div",r,[s("div",d,[e(l,null,{default:c(()=>[e(n,{value:"Feedback",optional:!0})]),_:1})])]),h])}}});export{C as __pageData,v as default};
